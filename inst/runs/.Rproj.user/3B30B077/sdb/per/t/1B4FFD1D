{
    "collab_server" : "",
    "contents" : "### This file is part of PCSS's Time Series suite.\n\n### Time Series is free software: you can redistribute it and/or modify\n### it under the terms of the GNU General Public License as published by\n### the Free Software Foundation, either version 3 of the License, or\n### (at your option) any later version.\n\n### Time Series is distributed in the hope that it will be useful,\n### but WITHOUT ANY WARRANTY; without even the implied warranty of\n### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n### GNU General Public License for more details.\n\n### You should have received a copy of the GNU General Public License\n### along with Time Series.  If not, see <http://www.gnu.org/licenses/>.\n### Time Series is free software: you can redistribute it and/or modify\n### it under the terms of the GNU General Public License as published by\n### the Free Software Foundation, either version 3 of the License, or\n### (at your option) any later version.\n\n### Time Series is distributed in the hope that it will be useful,\n### but WITHOUT ANY WARRANTY; without even the implied warranty of\n### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n### GNU General Public License for more details.\n\n### You should have received a copy of the GNU General Public License\n### along with Time Series.  If not, see <http://www.gnu.org/licenses/>.\n\nlibrary(shiny)\n### switching off the scientific notation\noptions(scipen=999)\n### so that the rnorm function is called only once during the session\n### these are the starting values of the application\ngetRunsResults <- function(fileAddresses, separator = \"\\t\"){\n  source(\"runs.R\")\n  results <- list()\n  for (lineNumber in  1:length(fileAddresses[[1]])){\n    dataFile <- fileAddresses$datapath[lineNumber]\n    data <- read.csv(dataFile, sep = separator, header = T)\n    tryCatch(\n    tryCountingRuns <- countForAll(data[[1]], data[[2]]),\n    error = function(e) tryCountingRuns <<- NA\n    )\n    if (is.na(tryCountingRuns[1])) return(data.frame(Info = \"FAIL - niepoprawny format - spróbuj wybrać inny separator\"))\n    else results <- c(results, list(tryCountingRuns))\n  }\n  lenUp <- 0; lenDown <- 0; lenNoChange <- 0\n  ## in this loop I am getting the maximum run length of a scpecific type for the analysed group of recordings\n  for (result in results){\n    if (length(result$directionup) > lenUp) lenUp <- length(result$directionup)\n    if (length(result$directiondown) > lenDown) lenDown <- length(result$directiondown)\n    if (length(result$noChange) > lenNoChange) lenNoChange <- length(result$noChange)\n  }\n  \n  finalResults <- data.frame()\n  for (result in results){\n    finalResults <- rbind(finalResults, c(result$directionup[1:lenUp], result$directiondown[1:lenDown], result$noChange[1:lenNoChange]))\n  }\n  finalResults <- cbind(fileAddresses$name,finalResults)\n  computedNames <- c(\"file\", \n                     paste(\"up\", 1:lenUp, sep = \"\"),\n                     paste(\"down\", 1:lenDown, sep = \"\"),\n                     paste(\"no change\", 1:lenNoChange, sep = \"\")\n  )\n  ### computing column names (i.e. how many \"Up\"'s, \"Down\"'s etc.)\n  colnames(finalResults) <- computedNames\n  ### and finally replacing NA's by zeros, so that it is easier to process (in fact, count 0 is obviously no NA, as 0 is a valid number of runs)\n  finalResults[is.na(finalResults)] <- as.integer(0)\n  return(finalResults)\n}\n\ngetSep <- function(separator){\n  sep = separator\n  if (separator == \"tabulator\"){\n    sep = \"\\t\"\n  }\n  if (separator == \"spacja\"){\n    sep = \" \"\n  }\n  return(sep)\n}\n\nshinyServer(function(input, output){\n  dataAddress <- reactive({\n    dataPaths <- data.frame(name = c(\"RR.csv\"), size = 0, type = c(\"text/plain\"), datapath = c(\"./RR.csv\"), stringsAsFactors = FALSE)\n    if (!is.null(input$files)){\n      dataPaths <- input$files\n    }\n    return(dataPaths)\n  })\n  \n  output$filesRunsView <- renderTable({\n    return(getRunsResults(dataAddress(), sep = getSep(input$separator)))\n  }, include.rownames = FALSE)\n  ### end of server below\n}\n)\n",
    "created" : 1438895859249.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2872941997",
    "id" : "1B4FFD1D",
    "lastKnownWriteTime" : 1438895909,
    "path" : "D:/Dropbox/Praca/granty/PCSS/ts-applications/runs/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}