max(NULL)
splitOnAnnot <- function(RR, annotations){
### this function splits the RR time series into disjoint subseries, breaking the RR on annotations
### which are not 0
badIdx <- which(annotations != 0)
if (length(badIdx) == 0)
return(list(RR))
start <- 1
rrSegments <- list()
for (idx in badIdx){
end <- idx
if (start<=end-1)
rrSegments <- c(rrSegments, list(RR[start:end-1]))
start <- idx+1
}
#the last run has been rejected automatically, now let us remove the first run (we do not know where it started -- possibly before the beginning of the recording, and we do not know where the last run ended, possibly after the end of the recording)
if (annotations[length(annotations)]==0)
rrSegments <- c(rrSegments, list(RR[start:length(RR)]))
return(rrSegments)
}
countRuns <- function(RR, allRuns = list(), directions = c()){
## allRuns - this list keeps all the runs in order
## directions - this vector keeps the designation - whether the run in the allRuns list is a deceleration or aceleration or noChange
# 1 is for deceleration, 0 for no change, -1 for acceleration
#current <- ifelse(RR[1]==RR[2],0, ifelse(RR[1]<RR[2], 1, -1))
if (length(RR)<2)
stop("the lenght of the time series must be greater than 1")## RR must be longer than 1, or runs make no sense
last <- ifelse(RR[1]==RR[2],0, ifelse(RR[1]<RR[2], 1, -1))
begin <- 1
for (index in seq(length = (length(RR)-2))+1){
current <- ifelse(RR[index]==RR[index+1],0, ifelse(RR[index]<RR[index+1], 1, -1))
if (current != last){
if (last == -1){
allRuns <- c(allRuns, list(RR[(begin):index]))
directions <- c(directions, "acc")
}
if (last == 0){
allRuns <- c(allRuns, list(RR[(begin):index]))
directions <- c(directions, "noChange")
}
if (last == 1){
allRuns <- c(allRuns, list(RR[(begin):index]))
directions<- c(directions, "dec")
}
begin <- index+1
last <- current
}
}
#now check the last run
if (last == -1){
allRuns <- c(allRuns, list(RR[(begin):length(RR)]))
directions <- c(directions, "acc")
}
if (last == 0){
allRuns <- c(allRuns, list(RR[(begin):length(RR)]))
directions <- c(directions, "noChange")
}
if (last == 1){
allRuns <- c(allRuns, list(RR[(begin):length(RR)]))
directions <- c(directions, "dec")
}
return(list(allRuns = allRuns, directions = directions))
}
splitAllIntoRuns <- function(RR, annotations){
listOfSeparateSegments <- splitOnAnnot(RR, annotations)
### initialize the list keeping separate runs in consecutive segments
separateRunsAndDirections <- list(allRuns = list(), directions = c())
for (segment in listOfSeparateSegments){
if (length(segment)>1){
temp <- countRuns(segment)
separateRunsAndDirections$allRuns <- c(separateRunsAndDirections$allRuns, temp$allRuns)
separateRunsAndDirections$directions <- c(separateRunsAndDirections$directions, temp$directions)
}
}
return(separateRunsAndDirections)
}
countForAll <- function(RR, annotations){
splitRR <- splitAllIntoRuns(RR, annotations)
directions <- splitRR$directions
decRuns <- splitRR$allRuns[directions == "dec"]
accRuns <- splitRR$allRuns[directions == "acc"]
noChangeRuns <- splitRR$allRuns[directions == "noChange"]
decRunsCounts <- unlist(lapply(decRuns, length))
accRunsCounts <- unlist(lapply(accRuns, length))
noChangeRunsCounts <- unlist(lapply(noChangeRuns, length))
maxDec <- ifelse(length(decRunsCounts>0), max(decRunsCounts), 0)
maxAcc <- ifelse(length(accRunsCounts>0), max(accRunsCounts), 0)
maxNoChange <- ifelse(length(noChangeRunsCounts)>0, max(noChangeRunsCounts), 0)
return(list(decelerations = decRunsCounts, accelerations = accRunsCounts, noChange = noChangeRunsCounts))
}
data <- read.csv("RR.csv", sep = "\t", header = T)
RR <- data$RR[1:10]
result <- countRuns(RR)
wynik <- countForAll(c(1,2,4,3,2,1,2,3,4), c(0,0,0,0,0,0,0,0,0))
wynik
seq(0)
sequ(NULL)
seq(NULL)
1:NULL
seq(length = 0)
seq(length = 1)
splitOnAnnot <- function(RR, annotations){
### this function splits the RR time series into disjoint subseries, breaking the RR on annotations
### which are not 0
badIdx <- which(annotations != 0)
if (length(badIdx) == 0)
return(list(RR))
start <- 1
rrSegments <- list()
for (idx in badIdx){
end <- idx
if (start<=end-1)
rrSegments <- c(rrSegments, list(RR[start:end-1]))
start <- idx+1
}
#the last run has been rejected automatically, now let us remove the first run (we do not know where it started -- possibly before the beginning of the recording, and we do not know where the last run ended, possibly after the end of the recording)
if (annotations[length(annotations)]==0)
rrSegments <- c(rrSegments, list(RR[start:length(RR)]))
return(rrSegments)
}
countRuns <- function(RR, allRuns = list(), directions = c()){
## allRuns - this list keeps all the runs in order
## directions - this vector keeps the designation - whether the run in the allRuns list is a deceleration or aceleration or noChange
# 1 is for deceleration, 0 for no change, -1 for acceleration
#current <- ifelse(RR[1]==RR[2],0, ifelse(RR[1]<RR[2], 1, -1))
if (length(RR)<2)
stop("the lenght of the time series must be greater than 1")## RR must be longer than 1, or runs make no sense
last <- ifelse(RR[1]==RR[2],0, ifelse(RR[1]<RR[2], 1, -1))
begin <- 1
for (index in seq(length = (length(RR)-2))+1){
current <- ifelse(RR[index]==RR[index+1],0, ifelse(RR[index]<RR[index+1], 1, -1))
if (current != last){
if (last == -1){
allRuns <- c(allRuns, list(RR[(begin):index]))
directions <- c(directions, "acc")
}
if (last == 0){
allRuns <- c(allRuns, list(RR[(begin):index]))
directions <- c(directions, "noChange")
}
if (last == 1){
allRuns <- c(allRuns, list(RR[(begin):index]))
directions<- c(directions, "dec")
}
begin <- index+1
last <- current
}
}
#now check the last run
if (last == -1){
allRuns <- c(allRuns, list(RR[(begin):length(RR)]))
directions <- c(directions, "acc")
}
if (last == 0){
allRuns <- c(allRuns, list(RR[(begin):length(RR)]))
directions <- c(directions, "noChange")
}
if (last == 1){
allRuns <- c(allRuns, list(RR[(begin):length(RR)]))
directions <- c(directions, "dec")
}
return(list(allRuns = allRuns, directions = directions))
}
splitAllIntoRuns <- function(RR, annotations){
listOfSeparateSegments <- splitOnAnnot(RR, annotations)
### initialize the list keeping separate runs in consecutive segments
separateRunsAndDirections <- list(allRuns = list(), directions = c())
for (segment in listOfSeparateSegments){
if (length(segment)>1){
temp <- countRuns(segment)
separateRunsAndDirections$allRuns <- c(separateRunsAndDirections$allRuns, temp$allRuns)
separateRunsAndDirections$directions <- c(separateRunsAndDirections$directions, temp$directions)
}
}
return(separateRunsAndDirections)
}
countForAll <- function(RR, annotations){
splitRR <- splitAllIntoRuns(RR, annotations)
directions <- splitRR$directions
decRuns <- splitRR$allRuns[directions == "dec"]
accRuns <- splitRR$allRuns[directions == "acc"]
noChangeRuns <- splitRR$allRuns[directions == "noChange"]
decRunsCounts <- unlist(lapply(decRuns, length))
accRunsCounts <- unlist(lapply(accRuns, length))
noChangeRunsCounts <- unlist(lapply(noChangeRuns, length))
## getting maximum lengths of the respective runs
maxDec <- ifelse(length(decRunsCounts>0), max(decRunsCounts), 0)
maxAcc <- ifelse(length(accRunsCounts>0), max(accRunsCounts), 0)
maxNoChange <- ifelse(length(noChangeRunsCounts)>0, max(noChangeRunsCounts), 0)
## now counting
decelerationRunsCounts <- c()
accelerationRunsCounts <- c()
noChangeRunsCounts <- c()
#decelerations
for (idxDec in seq(length = maxDec)){
decelerationRunsCounts <- c(decelerationRunsCounts, sum(decRunsCounts == idxDec))
}
for (idxAcc in seq(length = maxAcc)){
accelerationRunsCounts <- c(accelerationRunsCounts, sum(accRunsCounts == idxAcc))
}
for (idxNoChange in seq(length = maxNoChange)){
noChangeRunsCounts <- c(noChangeRunsCounts, sum(noChangeRunsCounts == idxNoChange))
}
return(list(decelerations = decRunsCounts, accelerations = accRunsCounts, noChange = noChangeRunsCounts))
}
data <- read.csv("RR.csv", sep = "\t", header = T)
RR <- data$RR[1:10]
result <- countRuns(RR)
splitOnAnnot <- function(RR, annotations){
### this function splits the RR time series into disjoint subseries, breaking the RR on annotations
### which are not 0
badIdx <- which(annotations != 0)
if (length(badIdx) == 0)
return(list(RR))
start <- 1
rrSegments <- list()
for (idx in badIdx){
end <- idx
if (start<=end-1)
rrSegments <- c(rrSegments, list(RR[start:end-1]))
start <- idx+1
}
#the last run has been rejected automatically, now let us remove the first run (we do not know where it started -- possibly before the beginning of the recording, and we do not know where the last run ended, possibly after the end of the recording)
if (annotations[length(annotations)]==0)
rrSegments <- c(rrSegments, list(RR[start:length(RR)]))
return(rrSegments)
}
countRuns <- function(RR, allRuns = list(), directions = c()){
## allRuns - this list keeps all the runs in order
## directions - this vector keeps the designation - whether the run in the allRuns list is a deceleration or aceleration or noChange
# 1 is for deceleration, 0 for no change, -1 for acceleration
#current <- ifelse(RR[1]==RR[2],0, ifelse(RR[1]<RR[2], 1, -1))
if (length(RR)<2)
stop("the lenght of the time series must be greater than 1")## RR must be longer than 1, or runs make no sense
last <- ifelse(RR[1]==RR[2],0, ifelse(RR[1]<RR[2], 1, -1))
begin <- 1
for (index in seq(length = (length(RR)-2))+1){
current <- ifelse(RR[index]==RR[index+1],0, ifelse(RR[index]<RR[index+1], 1, -1))
if (current != last){
if (last == -1){
allRuns <- c(allRuns, list(RR[(begin):index]))
directions <- c(directions, "acc")
}
if (last == 0){
allRuns <- c(allRuns, list(RR[(begin):index]))
directions <- c(directions, "noChange")
}
if (last == 1){
allRuns <- c(allRuns, list(RR[(begin):index]))
directions<- c(directions, "dec")
}
begin <- index+1
last <- current
}
}
#now check the last run
if (last == -1){
allRuns <- c(allRuns, list(RR[(begin):length(RR)]))
directions <- c(directions, "acc")
}
if (last == 0){
allRuns <- c(allRuns, list(RR[(begin):length(RR)]))
directions <- c(directions, "noChange")
}
if (last == 1){
allRuns <- c(allRuns, list(RR[(begin):length(RR)]))
directions <- c(directions, "dec")
}
return(list(allRuns = allRuns, directions = directions))
}
splitAllIntoRuns <- function(RR, annotations){
listOfSeparateSegments <- splitOnAnnot(RR, annotations)
### initialize the list keeping separate runs in consecutive segments
separateRunsAndDirections <- list(allRuns = list(), directions = c())
for (segment in listOfSeparateSegments){
if (length(segment)>1){
temp <- countRuns(segment)
separateRunsAndDirections$allRuns <- c(separateRunsAndDirections$allRuns, temp$allRuns)
separateRunsAndDirections$directions <- c(separateRunsAndDirections$directions, temp$directions)
}
}
return(separateRunsAndDirections)
}
countForAll <- function(RR, annotations){
splitRR <- splitAllIntoRuns(RR, annotations)
directions <- splitRR$directions
decRuns <- splitRR$allRuns[directions == "dec"]
accRuns <- splitRR$allRuns[directions == "acc"]
noChangeRuns <- splitRR$allRuns[directions == "noChange"]
decRunsCounts <- unlist(lapply(decRuns, length))
accRunsCounts <- unlist(lapply(accRuns, length))
noChangeRunsCounts <- unlist(lapply(noChangeRuns, length))
## getting maximum lengths of the respective runs
maxDec <- ifelse(length(decRunsCounts>0), max(decRunsCounts), 0)
maxAcc <- ifelse(length(accRunsCounts>0), max(accRunsCounts), 0)
maxNoChange <- ifelse(length(noChangeRunsCounts)>0, max(noChangeRunsCounts), 0)
## now counting
decelerationRunsCounts <- c()
accelerationRunsCounts <- c()
zeroChangeRunsCounts <- c()
#decelerations
for (idxDec in seq(length = maxDec)){
decelerationRunsCounts <- c(decelerationRunsCounts, sum(decRunsCounts == idxDec))
}
for (idxAcc in seq(length = maxAcc)){
accelerationRunsCounts <- c(accelerationRunsCounts, sum(accRunsCounts == idxAcc))
}
for (idxNoChange in seq(length = maxNoChange)){
zeroChangeRunsCounts <- c(zeroChangeRunsCounts, sum(noChangeRunsCounts == idxNoChange))
}
return(list(decelerations = decelerationRunsCounts, accelerations = accelerationRunsCounts, noChange = zeroChangeRunsCounts))
}
data <- read.csv("RR.csv", sep = "\t", header = T)
RR <- data$RR[1:10]
result <- countRuns(RR)
wynik <- countForAll(c(1,2,4,3,2,1,2,3,4), c(0,0,0,0,0,0,0,0,0))
wynik
wynik <- countForAll(c(1,2,4,3,2,1,2,3,4, 5), c(0,0,0,0,0,0,0,0,0, 0))
wynik
wynik <- countForAll(c(1,2,4,3,2,1,2,3,4, 4), c(0,0,0,0,0,0,0,0,0, 0))
wynik
wynik <- countForAll(c(1,2,4,3,2,1,2,3,4, 4), c(0,0,0,0,0,0,0,0,0, 0))
wynik
test_file("testRuns.R")
test_file("testRuns.R")
test_file("testRuns.R")
x = "ala"
lista <- list()
lista
lista[x] = c(1,2)
lista[[x]] = c(1,2)
lista
ala  <- c(1,2,3)
ala[1:10]
framka <- data.frame()
rbind(framka,ala)
rbind(framka,ala[1:10])
framka <- rbind(framka,ala[1:10])
framka <- rbind(framka,ala[1:10])
framka
paste("dec", 1:10)
paste("dec", 1:10, sep = "")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
isna(NA)
isNA(NA)
isNa(NA)
is.NA(NA)
is.na(NA)
ala <- data.frame(I = c(1, NA), II = c(NA, 2))
is.na(ala)
ala[is.na(ala)] <- 0
ala
shiny::runApp()
int(ala)
integer(ala)
shiny::runApp()
integer(0)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dzielenie <- function(x) 1/x
tryCatch(wynik <- dzielenie(0), error = function(e) wynik <- 8)
wynik
dzielenie <- function(x) x[100]
tryCatch(wynik <- dzielenie(0), error = function(e) wynik <- 8)
wynik
1[100]
1[100,2]
dzielenie <- function(x) x[100,2]
tryCatch(wynik <- dzielenie(0), error = function(e) wynik <- 8)
wynik
dzielenie(0)
tryCatch(wynik <- dzielenie(0), error = function(e) wynik <- 8)
wynik
tryCatch(wynik <- dzielenie(0), wynik = function(e) wynik <- 8)
tryCatch(wynik <- dzielenie(0), error = function(e) wynik <- 8)
wynik
rm(wynik)
wynik
tryCatch(wynik <- dzielenie(0), error = function(e) wynik <- 8)
wynik
tryCatch(wynik <- dzielenie(0), error = function(e) wynik <<- 8)
wynik
shiny::runApp()
shiny::runApp()
shiny::runApp()
500*15
500*15*4
1000*20*4
700*8
shiny::runApp()
500*10*4
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
2404 - 1944
proba <- function(a = list()){
a <- c(3, a)
print(a)
return(a)
}
print(proba(1))
print(proba(2))
splitOnAnnot <- function(signal, annotations){
### this function splits the signal time series into disjoint subseries, breaking the signal on annotations
### which are not 0
badIdx <- which(annotations != 0)
if (length(badIdx) == 0)
return(list(signal))
start <- 1
signalSegments <- list()
for (idx in badIdx){
end <- idx
if (start<=end-1)
signalSegments <- c(signalSegments, list(signal[start:end-1]))
start <- idx+1
}
if (annotations[length(annotations)]==0)
signalSegments <- c(signalSegments, list(signal[start:length(signal)]))
return(signalSegments)
}
shiny::runApp()
seq(1:0)
seq(1,0)
1:0
seq.int(from=1, to = 0, by =1)
seq.int(from=1, to = 0)
seq(1,0, by=1)
seq(0)
seq_along(0)
seq_len(0)
seq_len(1)
seq_len(5)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(shinytest)
recordTest()
devtools::install_github("DivadNojnarg/shinydashboardPlus")
library(shinydashboardPlus)
shinydashboardPlusGallery()
install.packages(c("styler", "shinyAce", "shinyWidgets", "shinyjqui"))
shinydashboardPlusGallery()
