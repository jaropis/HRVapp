shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
framka <- data.frame(a = c(1,2), b = c(1,2))
for (j in framka){}
for (j in framka){}
for (j in framka){
print(j)
}
framka <- data.frame(a = c(1,2), b = c("a","b"))
for (j in framka){
print(j)
}
framka[[1]]
a = c(1,2,3)
as.data.frame(a)
b = c(3,4,5)
rbind(a,b)
g = c()
rbind(g,a,b)
rbind(g,a)
typeof(rbind(g,a))
is(rbind(g,a))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
read.csv("C:\\Users\\JAROP_~1\\AppData\\Local\\Temp\\RtmpYV6cZN/5cd28580c2ca7d0141d464ab/3/RR3.csv", sep = "\t")
normalizePath("C:\\Users\\JAROP_~1\\AppData\\Local\\Temp\\RtmpYV6cZN/5cd28580c2ca7d0141d464ab/3/RR3.csv")
normalizePath("C:\\Users\\JAROP_~1\\AppData\\Local\\Temp\\")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getwd()
dataFile = "./RR.csv"
dataFile
data <- read.csv(dataFile, sep = separator, header = T)
data <- read.csv(dataFile, sep = "\t", header = T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
lista = list(col = "red")
x = 1:100
y <- x^2
plot(x,y, lista)
plot(x,y)
lista = list(x, y, col = "red")
do.call(plot, lista)
do.call("plot", lista)
do.call("plot", lista)
lista = list(x=x, y=y, col = "red")
do.call("plot", lista)
do.call("plot", lista)
lista
?do.call
do.call("plot", lista, quote = T)
lista = list(matrix(x,y, ncol = 2) col = "red")
lista = list(matrix(x,y, ncol = 2), col = "red")
lista
x
matrix(c(x,y), ncol = 2)
lista = list(matrix(c(x,y), ncol = 2), col = "red")
lista
do.call("plot", lista, quote = T)
lista2  <- list(i = 8)
lista+lista2
c(lista,lista2)
do.call(what = "plot", lista, quote = T)
lista  <- list(c(y~x), col = "red")
do.call(what = "plot", lista, quote = T)
x
lista  <- list(y~x, col = "red")
do.call(what = "plot", lista, quote = T)
xlab = parse(x[i])
xlab = parse("x[i]")
xlab = parse(text = "x[i]")
lista  <- list(y~x, col = "red", xlab = xlab)
do.call(what = "plot", lista, quote = T)
shiny::runApp()
source("HRA.R")
shiny::runApp()
shiny::runApp()
source("HRA.R")
shiny::runApp()
source("HRA.R")
shiny::runApp()
shiny::runApp()
source("HRA.R")
shiny::runApp()
source("HRA.R")
shiny::runApp()
source("HRA.R")
shiny::runApp()
source("HRA.R")
shiny::runApp()
source("HRA.R")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
250*15*4
45000*15*4
45000*4
shiny::runApp()
shiny::runApp()
## plik wyszukujacy nazwy zmiennych itd i podstawiajacy nowe nazwy w pliku (zeby np. ustalic jedna konwencje nazywania zmiennych/funkcji)
source("lista_podstawien.R")
directories <- list.dirs(full.names = FALSE)
myFiles <- c()
for (dir in directories[2:length(directories)]){# bo pierwszy to bieżący katalog, a my chcemy wejsc do wewnatrz
print(file.path(getwd(),dir))
myFiles <- c(myFiles,list.files(file.path(getwd(), dir), full.names = TRUE, pattern = "*.R$", recursive = FALSE))
}
for (f in myFiles){
original <- readLines(f)
for (i in 1:length(namesToExchange[,1])){
original <- gsub(namesToExchange[i,1], namesToExchange[i,2], original)
}
cat(original, file = f, sep = "\n")
}
#print(myFiles)
shiny::runApp()
## plik wyszukujacy nazwy zmiennych itd i podstawiajacy nowe nazwy w pliku (zeby np. ustalic jedna konwencje nazywania zmiennych/funkcji)
source("lista_podstawien.R")
directories <- list.dirs(full.names = FALSE)
myFiles <- c()
for (dir in directories[2:length(directories)]){# bo pierwszy to bieżący katalog, a my chcemy wejsc do wewnatrz
print(file.path(getwd(),dir))
myFiles <- c(myFiles,list.files(file.path(getwd(), dir), full.names = TRUE, pattern = "*.R$", recursive = FALSE))
}
for (f in myFiles){
original <- readLines(f)
for (i in 1:length(namesToExchange[,1])){
original <- gsub(namesToExchange[i,1], namesToExchange[i,2], original)
}
cat(original, file = f, sep = "\n")
}
#print(myFiles)
shiny::runApp()
shiny::runApp()
shiny::runApp()
print("dupa")
shiny::runApp()
shiny::runApp()
shiny::runApp()
instal.packages("lomb")
install.packages("lomb")
library(lomb)
data(lynx)
lynx
help(lynx)
plot(lynx)
lsp(lynx)
lsp(lynx, plot = F)
wynik <- lsp(lynx, plot = F)
plot(wynik)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
3000 * 12
4000 * 12 * 0.81
4000 * 12 * 0.81/4
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
R.home()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
stringus <- "ala.makota.xlsx"
stringus[-1]
stringus[length(stringus)-4:length(stringus)]
substring(stringus, length(stringus)-4,length(stringus))
substring(stringus, nchar(stringus)-4,nchar(stringus))
substring(stringus, nchar(stringus)-4,nchar(stringus)) == ".xlsx"
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
stft
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinytest)
shinytest::installDependencies()
library(shinytest)
recordTest(".")
runApp()
recordTest()
pwd()
wd()
getwd()
recordTest("/Users/jaropis/Dropbox/Praca/software/opengranary_apps/HRV/pp")
remove.packages("shinytest")
library(devtools)
install_githug("rstudio/shinytest")
install_github("rstudio/shinytest")
library(devtools)
install_github("rstudio/shinytest")
path <- getwd()
path
library(shinytest)
recordTest(path)
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
