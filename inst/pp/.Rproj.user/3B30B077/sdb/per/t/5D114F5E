{
    "collab_server" : "",
    "contents" : "### This file is part of PCSS's Run Test suite.\n\n### Run Test is free software: you can redistribute it and/or modify\n### it under the terms of the GNU General Public License as published by\n### the Free Software Foundation, either version 3 of the License, or\n### (at your option) any later version.\n\n### Run Test is distributed in the hope that it will be useful,\n### but WITHOUT ANY WARRANTY; without even the implied warranty of\n### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n### GNU General Public License for more details.\n\n### You should have received a copy of the GNU General Public License\n### along with Run Test.  If not, see <http://www.gnu.org/licenses/>.\n### Run Test is free software: you can redistribute it and/or modify\n### it under the terms of the GNU General Public License as published by\n### the Free Software Foundation, either version 3 of the License, or\n### (at your option) any later version.\n\n### Run Test is distributed in the hope that it will be useful,\n### but WITHOUT ANY WARRANTY; without even the implied warranty of\n### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n### GNU General Public License for more details.\n\n### You should have received a copy of the GNU General Public License\n### along with Run Test.  If not, see <http://www.gnu.org/licenses/>.\n\nlibrary(shiny)\n### switching off the scientific notation\noptions(scipen=999)\n### so that the rnorm function is called only once during the session\n### these are the starting values of the application\ngetPpResults <- function(fileAddresses, separator = \"\\t\"){\n  source(\"HRA.R\")\n  results <- c()\n  for (lineNumber in  1:length(fileAddresses[[1]])){\n    dataFile <- fileAddresses$datapath[lineNumber]\n    data <- read.csv(dataFile, sep = separator, header = T)\n    tempPP <- preparePP(data[[1]], data[[2]])\n    results <- rbind(results, HRAdescriptors(tempPP))\n  }\n  results <- round(results,3)\n  results <- cbind(fileAddresses$name, results)\n  colnames(results) <- c(\"plik\", \"SD1\", \"SD2\", \"SDNN\", \"SD1d\", \"SD1a\", \"C1d\", \"SD2d\", \"SD2a\", \"C2d\", \"SDNNd\", \"SDNNa\", \"Cd\")\n  return(results)\n}\n\ngetSep <- function(separator){\n  sep = separator\n  if (separator == \"tabulator\"){\n    sep = \"\\t\"\n  }\n  if (separator == \"spacja\"){\n    sep = \" \"\n  }\n  return(sep)\n}\n\nshinyServer(function(input, output){\n  dataAddress <- reactive({\n    dataPaths <- data.frame(name = c(\"RR.csv\"), size = 0, type = c(\"text/plain\"), datapath = c(\"./RR.csv\"), stringsAsFactors = FALSE)\n    if (!is.null(input$files)){\n      dataPaths <- input$files\n    }\n    return(dataPaths)\n  })\n  \n  output$plot <- renderPlot({\n    dataFile <- dataAddress()$datapath[1]\n    errorOnRead <- FALSE\n    data <- read.csv(dataFile, sep = getSep(input$separator), header = T)\n    tryCatch(\n      tempPP <- preparePP(data[[1]], data[[2]]),\n      error = function(e) errorOnRead <<-  TRUE\n      )\n    if (errorOnRead){\n      plot(1:10, 1:10, col = \"white\")\n      text(5,5, \"Fail - niepoprawny format\", cex = 1.5)\n      text(5,3, \"uzyj innego separatora\", cex = 1.5)      \n    }\n    else {\n    drawPP(tempPP, variableName = ifelse(input$variableName==\"\", \"RR\", input$variableName), color = input$color)\n    }\n  })\n  \n  output$filesView <- renderTable({\n    tryCatch(\n      returnTable <- getPpResults(dataAddress(), sep = getSep(input$separator)),\n      error = function(e) returnTable <<- NA\n    )\n    if (is.na(returnTable[1])) return(data.frame(Info = \"FAIL - niepoprawny format - spróbuj wybrać inny separator\"))\n    else return(returnTable)\n  }, include.rownames = FALSE)\n  \n  output$myDataView <- renderTable({\n    X <- input$variableName\n    myTable <- data.frame(myData()[[1]], transformData()$data)\n    colnames(myTable) <- c(input$variableName, \"transformacja\")\n    myTable\n  })\n  \n  output$report <- renderUI({\n    if (is.character(resulti()$p.value)){\n      maPL <- \"ma\"; maEN <- \"is\"\n    } else {\n      if (resulti()$p.value<0.05){\n        maPL <- \"\"; maEN <- \"\"\n      } else {\n        maPL <- \"<strong>nie</strong>\"; maEN <- \"<strong>not</strong>\"\n      }\n    }\n    HTML(paste(\n      \"<h4>Polski</h4> <p> Hipoteza o normalności zmiennej \", maPL, \" <strong>została odrzucona</strong>, (p=\",resulti()$p.value,\")\",\n      \"<h4>English</h4> <p>The hypothesis that the variable is normally distributed has \", maEN, \" been rejected, (p=\",resulti()$p.value,\")\", sep=\"\")\n    )\n    \n  }\n  )\n  ### end of server below\n}\n)\n\n",
    "created" : 1437931742970.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "608816844",
    "id" : "5D114F5E",
    "lastKnownWriteTime" : 1441229823,
    "path" : "D:/Dropbox/Praca/granty/PCSS/ts-applications/pp/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}